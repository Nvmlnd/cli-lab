import click         # –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è CLI (Command Line Interface)
import pandas as pd  # –î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ CSV-—Ñ–∞–π–ª–∞–º–∏ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—å (DataFrame)

# üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ —î —Å–∏–º–≤–æ–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å—É —Ä—è–¥–∫–∞ (\r\n) –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–æ–∫
def carriage_returns(df):
    for index, row in df.iterrows():  # –ø—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–æ–∂–Ω–æ–º—É —Ä—è–¥–∫—É
        for column, field in row.items():  # –ø–æ –∫–æ–∂–Ω–æ–º—É –ø–æ–ª—é –≤ —Ä—è–¥–∫—É (–æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è pandas 2.0+)
            try:
                if "\r\n" in field:  # —è–∫—â–æ –≤–º—ñ—Å—Ç –∫–ª—ñ—Ç–∏–Ω–∫–∏ –º—ñ—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å
                    return index, column, field  # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é —Ç–∞ —Å–∞–º —Ç–µ–∫—Å—Ç
            except TypeError:
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—ñ –Ω–µ —î —Ä—è–¥–∫–∞–º–∏

# üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —Ä–∞—Ö—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ –∑ –Ω–∞–∑–≤–æ—é "Unnamed"
def unnamed_columns(df):
    bad_columns = []
    for key in df.keys():
        if "Unnamed" in key:  # pandas —Å—Ç–≤–æ—Ä—é—î —Ç–∞–∫—ñ –Ω–∞–∑–≤–∏, —è–∫—â–æ –≤ CSV –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            bad_columns.append(key)
    return len(bad_columns)  # –ø–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫

# üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏, –≤ —è–∫–∏—Ö –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
def zero_count_columns(df):
    bad_columns = []
    for key in df.keys():
        if df[key].count() == 0:  # count() —Ä–∞—Ö—É—î –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            bad_columns.append(key)
    return bad_columns

# ‚öôÔ∏è –û—Å–Ω–æ–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 'check' ‚Äî –ø—Ä–∏–π–º–∞—î CSV-—Ñ–∞–π–ª —ñ –∑–∞–ø—É—Å–∫–∞—î –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
@click.command()
@click.argument('filename', type=click.Path(exists=True))  # —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
def check(filename):
    df = pd.read_csv(filename)  # –∑—á–∏—Ç—É—î–º–æ CSV —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ

    # üö® –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –ø–æ—Ä–æ–∂–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
    for column in zero_count_columns(df):
        click.echo(f"Warning: Column '{column}' has no items in it")

    # üö® –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –∫–æ–ª–æ–Ω–∫–∞ –∑ –Ω–∞–∑–≤–æ—é Unnamed
    unnamed = unnamed_columns(df)
    if unnamed:
        click.echo(f"Warning: found {unnamed} columns that are Unnamed")

    # üö® –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —Å–∏–º–≤–æ–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å—É —Ä—è–¥–∫–∞ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–æ–∫
    carriage_field = carriage_returns(df)
    if carriage_field:
        index, column, field = carriage_field
        click.echo((f"Warning: found carriage returns at index {index}"
                    f" of column '{column}':"))
        click.echo(f"         '{field[:50]}'")  # –≤–∏–≤–æ–¥–∏–º–æ –ø–µ—Ä—à—ñ 50 —Å–∏–º–≤–æ–ª—ñ–≤

# üîî –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è (–¥–µ–º–æ CLI)
@click.command()
@click.option("--name", default="—Å–≤—ñ—Ç", help="–Ü–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
def hello(name):
    click.echo(f"–ü—Ä–∏–≤—ñ—Ç, {name}!")

# üß© –û–≥–æ–ª–æ—à—É—î–º–æ CLI-–≥—Ä—É–ø—É, —â–æ–± –º–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ –∫–æ–º–∞–Ω–¥
@click.group()
def cli():
    pass

# ‚ûï –†–µ—î—Å—Ç—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –≤ CLI
cli.add_command(hello)
cli.add_command(check)

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—î–º–æ CLI –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É —Å–∫—Ä–∏–ø—Ç—É –Ω–∞–ø—Ä—è–º—É
if __name__ == '__main__':
    cli()

#python csv_linter/main.py hello --name Maksym
#python csv_linter/main.py check test.csv

#.\cli-linter.exe hello --name Maksym
#.\cli-linter.exe check test.csv
